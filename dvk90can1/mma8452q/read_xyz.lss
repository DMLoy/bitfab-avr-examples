
read_xyz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00000846  000008ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000846  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005e4  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000289  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f3  00000000  00000000  000012b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001dc  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000366  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001df2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  54:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  58:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  5c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  60:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  68:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  70:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  74:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  7c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  80:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  84:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  88:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  8c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  90:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 e4       	ldi	r30, 0x46	; 70
  a8:	f8 e0       	ldi	r31, 0x08	; 8
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	ac 3d       	cpi	r26, 0xDC	; 220
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>
  ba:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  be:	0c 94 21 04 	jmp	0x842	; 0x842 <_exit>

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c6 <main>:
#define F_CPU  8000000  // 8MHz
#define MMA8452Q_TWI_ADDRESS  0x3a  // 0x1d << 1 for r/w bit


int main(void)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	6d 97       	sbiw	r28, 0x1d	; 29
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
    // Set all bits of PORT A for OUTPUT.
    // LEDs are on PORT A when using DVK90CAN1.
    DDRA  = 0xff;
  da:	81 e2       	ldi	r24, 0x21	; 33
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18

    // Turn on LEDs in sequence to show progress.
    PORTA = 0b00000001;
  e4:	82 e2       	ldi	r24, 0x22	; 34
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18

    // send a power-on message to anyone listening on UART
    uart_init( _UBRR( F_CPU, 9600) );
  ee:	83 e3       	ldi	r24, 0x33	; 51
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 84 01 	call	0x308	; 0x308 <uart_init>
    put_string( "[Bitfab Technoloiges LLC. EXAMPLE]\r\nProgram: read_xyz\r\nHardware: DVK90CAN1 + MMA8452Q (0x1D)\r\nLicense: GPL v3\r\n\0" );
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 c2 01 	call	0x384	; 0x384 <put_string>

    i2c_init();
  fe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <i2c_init>

    // start condition, device address, write mode
    unsigned char ret;
    ret = i2c_start( MMA8452Q_TWI_ADDRESS + I2C_WRITE );
 102:	8a e3       	ldi	r24, 0x3A	; 58
 104:	0e 94 02 02 	call	0x404	; 0x404 <i2c_start>
 108:	89 83       	std	Y+1, r24	; 0x01

    if ( ret ) {
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	88 23       	and	r24, r24
 10e:	09 f4       	brne	.+2      	; 0x112 <main+0x4c>
 110:	f4 c0       	rjmp	.+488    	; 0x2fa <main+0x234>
        // failed to issue start condition, possibly no device found
        i2c_stop();
 112:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_stop>
        // send an error message to anyone listening on UART
        put_string( "[ERROR] TWI: failed to issue start condition, possibly no device found.\r\n\0" );
 116:	81 e7       	ldi	r24, 0x71	; 113
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 c2 01 	call	0x384	; 0x384 <put_string>
        // flash all eight LEDs forever to indicate error
        for(;;) {
            PORTA = 0xff;
 11e:	82 e2       	ldi	r24, 0x22	; 34
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e4       	ldi	r25, 0x40	; 64
 12c:	a9 e7       	ldi	r26, 0x79	; 121
 12e:	b4 e4       	ldi	r27, 0x44	; 68
 130:	8a 83       	std	Y+2, r24	; 0x02
 132:	9b 83       	std	Y+3, r25	; 0x03
 134:	ac 83       	std	Y+4, r26	; 0x04
 136:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	4a e7       	ldi	r20, 0x7A	; 122
 13e:	53 e4       	ldi	r21, 0x43	; 67
 140:	6a 81       	ldd	r22, Y+2	; 0x02
 142:	7b 81       	ldd	r23, Y+3	; 0x03
 144:	8c 81       	ldd	r24, Y+4	; 0x04
 146:	9d 81       	ldd	r25, Y+5	; 0x05
 148:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsf3>
 14c:	dc 01       	movw	r26, r24
 14e:	cb 01       	movw	r24, r22
 150:	8e 83       	std	Y+6, r24	; 0x06
 152:	9f 83       	std	Y+7, r25	; 0x07
 154:	a8 87       	std	Y+8, r26	; 0x08
 156:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e8       	ldi	r20, 0x80	; 128
 15e:	5f e3       	ldi	r21, 0x3F	; 63
 160:	6e 81       	ldd	r22, Y+6	; 0x06
 162:	7f 81       	ldd	r23, Y+7	; 0x07
 164:	88 85       	ldd	r24, Y+8	; 0x08
 166:	99 85       	ldd	r25, Y+9	; 0x09
 168:	0e 94 15 03 	call	0x62a	; 0x62a <__cmpsf2>
 16c:	88 23       	and	r24, r24
 16e:	2c f4       	brge	.+10     	; 0x17a <main+0xb4>
		__ticks = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	9b 87       	std	Y+11, r25	; 0x0b
 176:	8a 87       	std	Y+10, r24	; 0x0a
 178:	3f c0       	rjmp	.+126    	; 0x1f8 <main+0x132>
	else if (__tmp > 65535)
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	3f ef       	ldi	r19, 0xFF	; 255
 17e:	4f e7       	ldi	r20, 0x7F	; 127
 180:	57 e4       	ldi	r21, 0x47	; 71
 182:	6e 81       	ldd	r22, Y+6	; 0x06
 184:	7f 81       	ldd	r23, Y+7	; 0x07
 186:	88 85       	ldd	r24, Y+8	; 0x08
 188:	99 85       	ldd	r25, Y+9	; 0x09
 18a:	0e 94 92 03 	call	0x724	; 0x724 <__gesf2>
 18e:	18 16       	cp	r1, r24
 190:	4c f5       	brge	.+82     	; 0x1e4 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e2       	ldi	r20, 0x20	; 32
 198:	51 e4       	ldi	r21, 0x41	; 65
 19a:	6a 81       	ldd	r22, Y+2	; 0x02
 19c:	7b 81       	ldd	r23, Y+3	; 0x03
 19e:	8c 81       	ldd	r24, Y+4	; 0x04
 1a0:	9d 81       	ldd	r25, Y+5	; 0x05
 1a2:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsf3>
 1a6:	dc 01       	movw	r26, r24
 1a8:	cb 01       	movw	r24, r22
 1aa:	bc 01       	movw	r22, r24
 1ac:	cd 01       	movw	r24, r26
 1ae:	0e 94 19 03 	call	0x632	; 0x632 <__fixunssfsi>
 1b2:	dc 01       	movw	r26, r24
 1b4:	cb 01       	movw	r24, r22
 1b6:	9b 87       	std	Y+11, r25	; 0x0b
 1b8:	8a 87       	std	Y+10, r24	; 0x0a
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <main+0x114>
 1bc:	89 e1       	ldi	r24, 0x19	; 25
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9d 87       	std	Y+13, r25	; 0x0d
 1c2:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c4:	8c 85       	ldd	r24, Y+12	; 0x0c
 1c6:	9d 85       	ldd	r25, Y+13	; 0x0d
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x102>
 1cc:	9d 87       	std	Y+13, r25	; 0x0d
 1ce:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d0:	8a 85       	ldd	r24, Y+10	; 0x0a
 1d2:	9b 85       	ldd	r25, Y+11	; 0x0b
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	9b 87       	std	Y+11, r25	; 0x0b
 1d8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	8a 85       	ldd	r24, Y+10	; 0x0a
 1dc:	9b 85       	ldd	r25, Y+11	; 0x0b
 1de:	00 97       	sbiw	r24, 0x00	; 0
 1e0:	69 f7       	brne	.-38     	; 0x1bc <main+0xf6>
 1e2:	14 c0       	rjmp	.+40     	; 0x20c <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e4:	6e 81       	ldd	r22, Y+6	; 0x06
 1e6:	7f 81       	ldd	r23, Y+7	; 0x07
 1e8:	88 85       	ldd	r24, Y+8	; 0x08
 1ea:	99 85       	ldd	r25, Y+9	; 0x09
 1ec:	0e 94 19 03 	call	0x632	; 0x632 <__fixunssfsi>
 1f0:	dc 01       	movw	r26, r24
 1f2:	cb 01       	movw	r24, r22
 1f4:	9b 87       	std	Y+11, r25	; 0x0b
 1f6:	8a 87       	std	Y+10, r24	; 0x0a
 1f8:	8a 85       	ldd	r24, Y+10	; 0x0a
 1fa:	9b 85       	ldd	r25, Y+11	; 0x0b
 1fc:	9f 87       	std	Y+15, r25	; 0x0f
 1fe:	8e 87       	std	Y+14, r24	; 0x0e
 200:	8e 85       	ldd	r24, Y+14	; 0x0e
 202:	9f 85       	ldd	r25, Y+15	; 0x0f
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0x13e>
 208:	9f 87       	std	Y+15, r25	; 0x0f
 20a:	8e 87       	std	Y+14, r24	; 0x0e
            _delay_ms(997);
            PORTA = 0x00;
 20c:	82 e2       	ldi	r24, 0x22	; 34
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	10 82       	st	Z, r1
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e4       	ldi	r25, 0x40	; 64
 218:	a9 e7       	ldi	r26, 0x79	; 121
 21a:	b4 e4       	ldi	r27, 0x44	; 68
 21c:	88 8b       	std	Y+16, r24	; 0x10
 21e:	99 8b       	std	Y+17, r25	; 0x11
 220:	aa 8b       	std	Y+18, r26	; 0x12
 222:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	4a e7       	ldi	r20, 0x7A	; 122
 22a:	53 e4       	ldi	r21, 0x43	; 67
 22c:	68 89       	ldd	r22, Y+16	; 0x10
 22e:	79 89       	ldd	r23, Y+17	; 0x11
 230:	8a 89       	ldd	r24, Y+18	; 0x12
 232:	9b 89       	ldd	r25, Y+19	; 0x13
 234:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsf3>
 238:	dc 01       	movw	r26, r24
 23a:	cb 01       	movw	r24, r22
 23c:	8c 8b       	std	Y+20, r24	; 0x14
 23e:	9d 8b       	std	Y+21, r25	; 0x15
 240:	ae 8b       	std	Y+22, r26	; 0x16
 242:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	40 e8       	ldi	r20, 0x80	; 128
 24a:	5f e3       	ldi	r21, 0x3F	; 63
 24c:	6c 89       	ldd	r22, Y+20	; 0x14
 24e:	7d 89       	ldd	r23, Y+21	; 0x15
 250:	8e 89       	ldd	r24, Y+22	; 0x16
 252:	9f 89       	ldd	r25, Y+23	; 0x17
 254:	0e 94 15 03 	call	0x62a	; 0x62a <__cmpsf2>
 258:	88 23       	and	r24, r24
 25a:	2c f4       	brge	.+10     	; 0x266 <main+0x1a0>
		__ticks = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	99 8f       	std	Y+25, r25	; 0x19
 262:	88 8f       	std	Y+24, r24	; 0x18
 264:	3f c0       	rjmp	.+126    	; 0x2e4 <main+0x21e>
	else if (__tmp > 65535)
 266:	20 e0       	ldi	r18, 0x00	; 0
 268:	3f ef       	ldi	r19, 0xFF	; 255
 26a:	4f e7       	ldi	r20, 0x7F	; 127
 26c:	57 e4       	ldi	r21, 0x47	; 71
 26e:	6c 89       	ldd	r22, Y+20	; 0x14
 270:	7d 89       	ldd	r23, Y+21	; 0x15
 272:	8e 89       	ldd	r24, Y+22	; 0x16
 274:	9f 89       	ldd	r25, Y+23	; 0x17
 276:	0e 94 92 03 	call	0x724	; 0x724 <__gesf2>
 27a:	18 16       	cp	r1, r24
 27c:	4c f5       	brge	.+82     	; 0x2d0 <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	40 e2       	ldi	r20, 0x20	; 32
 284:	51 e4       	ldi	r21, 0x41	; 65
 286:	68 89       	ldd	r22, Y+16	; 0x10
 288:	79 89       	ldd	r23, Y+17	; 0x11
 28a:	8a 89       	ldd	r24, Y+18	; 0x12
 28c:	9b 89       	ldd	r25, Y+19	; 0x13
 28e:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsf3>
 292:	dc 01       	movw	r26, r24
 294:	cb 01       	movw	r24, r22
 296:	bc 01       	movw	r22, r24
 298:	cd 01       	movw	r24, r26
 29a:	0e 94 19 03 	call	0x632	; 0x632 <__fixunssfsi>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	99 8f       	std	Y+25, r25	; 0x19
 2a4:	88 8f       	std	Y+24, r24	; 0x18
 2a6:	0f c0       	rjmp	.+30     	; 0x2c6 <main+0x200>
 2a8:	89 e1       	ldi	r24, 0x19	; 25
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	9b 8f       	std	Y+27, r25	; 0x1b
 2ae:	8a 8f       	std	Y+26, r24	; 0x1a
 2b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
 2b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x1ee>
 2b8:	9b 8f       	std	Y+27, r25	; 0x1b
 2ba:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	88 8d       	ldd	r24, Y+24	; 0x18
 2be:	99 8d       	ldd	r25, Y+25	; 0x19
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	99 8f       	std	Y+25, r25	; 0x19
 2c4:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c6:	88 8d       	ldd	r24, Y+24	; 0x18
 2c8:	99 8d       	ldd	r25, Y+25	; 0x19
 2ca:	00 97       	sbiw	r24, 0x00	; 0
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <main+0x1e2>
            _delay_ms(997);
        }
 2ce:	27 cf       	rjmp	.-434    	; 0x11e <main+0x58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2d0:	6c 89       	ldd	r22, Y+20	; 0x14
 2d2:	7d 89       	ldd	r23, Y+21	; 0x15
 2d4:	8e 89       	ldd	r24, Y+22	; 0x16
 2d6:	9f 89       	ldd	r25, Y+23	; 0x17
 2d8:	0e 94 19 03 	call	0x632	; 0x632 <__fixunssfsi>
 2dc:	dc 01       	movw	r26, r24
 2de:	cb 01       	movw	r24, r22
 2e0:	99 8f       	std	Y+25, r25	; 0x19
 2e2:	88 8f       	std	Y+24, r24	; 0x18
 2e4:	88 8d       	ldd	r24, Y+24	; 0x18
 2e6:	99 8d       	ldd	r25, Y+25	; 0x19
 2e8:	9d 8f       	std	Y+29, r25	; 0x1d
 2ea:	8c 8f       	std	Y+28, r24	; 0x1c
 2ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <main+0x22a>
 2f4:	9d 8f       	std	Y+29, r25	; 0x1d
 2f6:	8c 8f       	std	Y+28, r24	; 0x1c
 2f8:	12 cf       	rjmp	.-476    	; 0x11e <main+0x58>
        
    }
    else {
        put_string( "TWI: issued start condition.\r\n\0" );
 2fa:	8c eb       	ldi	r24, 0xBC	; 188
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 c2 01 	call	0x384	; 0x384 <put_string>
        i2c_stop();       
 302:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_stop>
    }

    for(;;);    
 306:	ff cf       	rjmp	.-2      	; 0x306 <main+0x240>

00000308 <uart_init>:
#include "uartcomm.h"

void uart_init(unsigned int ubrr) {
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	00 d0       	rcall	.+0      	; 0x30e <uart_init+0x6>
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	9a 83       	std	Y+2, r25	; 0x02
 314:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char) (0xf & (ubrr >> 8));
 316:	85 ec       	ldi	r24, 0xC5	; 197
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	29 81       	ldd	r18, Y+1	; 0x01
 31c:	3a 81       	ldd	r19, Y+2	; 0x02
 31e:	23 2f       	mov	r18, r19
 320:	33 27       	eor	r19, r19
 322:	2f 70       	andi	r18, 0x0F	; 15
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) (0xff & ubrr);
 328:	84 ec       	ldi	r24, 0xC4	; 196
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	29 81       	ldd	r18, Y+1	; 0x01
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 332:	81 ec       	ldi	r24, 0xC1	; 193
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	28 e1       	ldi	r18, 0x18	; 24
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
	UCSR0C = 3 << UCSZ0;
 33c:	82 ec       	ldi	r24, 0xC2	; 194
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	26 e0       	ldi	r18, 0x06	; 6
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
}
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <put_char>:

void put_char(char data) {
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	1f 92       	push	r1
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)));
 35c:	00 00       	nop
 35e:	80 ec       	ldi	r24, 0xC0	; 192
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	80 81       	ld	r24, Z
 366:	88 2f       	mov	r24, r24
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	80 72       	andi	r24, 0x20	; 32
 36c:	99 27       	eor	r25, r25
 36e:	00 97       	sbiw	r24, 0x00	; 0
 370:	b1 f3       	breq	.-20     	; 0x35e <put_char+0xe>
	UDR0 = data;
 372:	86 ec       	ldi	r24, 0xC6	; 198
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	29 81       	ldd	r18, Y+1	; 0x01
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
}
 37c:	0f 90       	pop	r0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <put_string>:

void put_string(char *str) {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	00 d0       	rcall	.+0      	; 0x38a <put_string+0x6>
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	9a 83       	std	Y+2, r25	; 0x02
 390:	89 83       	std	Y+1, r24	; 0x01
	while (*str) put_char(*str++);
 392:	0b c0       	rjmp	.+22     	; 0x3aa <put_string+0x26>
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	9a 81       	ldd	r25, Y+2	; 0x02
 398:	9c 01       	movw	r18, r24
 39a:	2f 5f       	subi	r18, 0xFF	; 255
 39c:	3f 4f       	sbci	r19, 0xFF	; 255
 39e:	3a 83       	std	Y+2, r19	; 0x02
 3a0:	29 83       	std	Y+1, r18	; 0x01
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	0e 94 a8 01 	call	0x350	; 0x350 <put_char>
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	9a 81       	ldd	r25, Y+2	; 0x02
 3ae:	fc 01       	movw	r30, r24
 3b0:	80 81       	ld	r24, Z
 3b2:	88 23       	and	r24, r24
 3b4:	79 f7       	brne	.-34     	; 0x394 <put_string+0x10>
}
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <get_char>:

char get_char(void) {
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSR0A & (1 << RXC0)));
 3c8:	00 00       	nop
 3ca:	80 ec       	ldi	r24, 0xC0	; 192
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	fc 01       	movw	r30, r24
 3d0:	80 81       	ld	r24, Z
 3d2:	88 23       	and	r24, r24
 3d4:	d4 f7       	brge	.-12     	; 0x3ca <get_char+0xa>
	return UDR0;
 3d6:	86 ec       	ldi	r24, 0xC6	; 198
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	80 81       	ld	r24, Z
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <i2c_init>:

/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 3ec:	89 eb       	ldi	r24, 0xB9	; 185
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	10 82       	st	Z, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 3f4:	88 eb       	ldi	r24, 0xB8	; 184
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	2c e0       	ldi	r18, 0x0C	; 12
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18

}/* i2c_init */
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <i2c_start>:
/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	00 d0       	rcall	.+0      	; 0x40a <i2c_start+0x6>
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 410:	8c eb       	ldi	r24, 0xBC	; 188
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	24 ea       	ldi	r18, 0xA4	; 164
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 41a:	00 00       	nop
 41c:	8c eb       	ldi	r24, 0xBC	; 188
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	fc 01       	movw	r30, r24
 422:	80 81       	ld	r24, Z
 424:	88 23       	and	r24, r24
 426:	d4 f7       	brge	.-12     	; 0x41c <i2c_start+0x18>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 428:	89 eb       	ldi	r24, 0xB9	; 185
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
 430:	88 7f       	andi	r24, 0xF8	; 248
 432:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	88 30       	cpi	r24, 0x08	; 8
 438:	29 f0       	breq	.+10     	; 0x444 <i2c_start+0x40>
 43a:	89 81       	ldd	r24, Y+1	; 0x01
 43c:	80 31       	cpi	r24, 0x10	; 16
 43e:	11 f0       	breq	.+4      	; 0x444 <i2c_start+0x40>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	20 c0       	rjmp	.+64     	; 0x484 <i2c_start+0x80>

	// send device address
	TWDR = address;
 444:	8b eb       	ldi	r24, 0xBB	; 187
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	2a 81       	ldd	r18, Y+2	; 0x02
 44a:	fc 01       	movw	r30, r24
 44c:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 44e:	8c eb       	ldi	r24, 0xBC	; 188
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	24 e8       	ldi	r18, 0x84	; 132
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 458:	00 00       	nop
 45a:	8c eb       	ldi	r24, 0xBC	; 188
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	fc 01       	movw	r30, r24
 460:	80 81       	ld	r24, Z
 462:	88 23       	and	r24, r24
 464:	d4 f7       	brge	.-12     	; 0x45a <i2c_start+0x56>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 466:	89 eb       	ldi	r24, 0xB9	; 185
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	fc 01       	movw	r30, r24
 46c:	80 81       	ld	r24, Z
 46e:	88 7f       	andi	r24, 0xF8	; 248
 470:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	88 31       	cpi	r24, 0x18	; 24
 476:	29 f0       	breq	.+10     	; 0x482 <i2c_start+0x7e>
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	80 34       	cpi	r24, 0x40	; 64
 47c:	11 f0       	breq	.+4      	; 0x482 <i2c_start+0x7e>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	01 c0       	rjmp	.+2      	; 0x484 <i2c_start+0x80>

	return 0;
 482:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	00 d0       	rcall	.+0      	; 0x494 <i2c_start_wait+0x6>
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	8a 83       	std	Y+2, r24	; 0x02


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 49a:	8c eb       	ldi	r24, 0xBC	; 188
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	24 ea       	ldi	r18, 0xA4	; 164
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 4a4:	00 00       	nop
 4a6:	8c eb       	ldi	r24, 0xBC	; 188
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	fc 01       	movw	r30, r24
 4ac:	80 81       	ld	r24, Z
 4ae:	88 23       	and	r24, r24
 4b0:	d4 f7       	brge	.-12     	; 0x4a6 <i2c_start_wait+0x18>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 4b2:	89 eb       	ldi	r24, 0xB9	; 185
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	88 7f       	andi	r24, 0xF8	; 248
 4bc:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	88 30       	cpi	r24, 0x08	; 8
 4c2:	21 f0       	breq	.+8      	; 0x4cc <i2c_start_wait+0x3e>
 4c4:	89 81       	ldd	r24, Y+1	; 0x01
 4c6:	80 31       	cpi	r24, 0x10	; 16
 4c8:	09 f0       	breq	.+2      	; 0x4cc <i2c_start_wait+0x3e>
 4ca:	2f c0       	rjmp	.+94     	; 0x52a <i2c_start_wait+0x9c>
    
    	// send device address
    	TWDR = address;
 4cc:	8b eb       	ldi	r24, 0xBB	; 187
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2a 81       	ldd	r18, Y+2	; 0x02
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
    	TWCR = (1<<TWINT) | (1<<TWEN);
 4d6:	8c eb       	ldi	r24, 0xBC	; 188
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	24 e8       	ldi	r18, 0x84	; 132
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 4e0:	00 00       	nop
 4e2:	8c eb       	ldi	r24, 0xBC	; 188
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	fc 01       	movw	r30, r24
 4e8:	80 81       	ld	r24, Z
 4ea:	88 23       	and	r24, r24
 4ec:	d4 f7       	brge	.-12     	; 0x4e2 <i2c_start_wait+0x54>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 4ee:	89 eb       	ldi	r24, 0xB9	; 185
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	80 81       	ld	r24, Z
 4f6:	88 7f       	andi	r24, 0xF8	; 248
 4f8:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	80 32       	cpi	r24, 0x20	; 32
 4fe:	19 f0       	breq	.+6      	; 0x506 <i2c_start_wait+0x78>
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	88 35       	cpi	r24, 0x58	; 88
 504:	89 f4       	brne	.+34     	; 0x528 <i2c_start_wait+0x9a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 506:	8c eb       	ldi	r24, 0xBC	; 188
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	24 e9       	ldi	r18, 0x94	; 148
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 510:	00 00       	nop
 512:	8c eb       	ldi	r24, 0xBC	; 188
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	fc 01       	movw	r30, r24
 518:	80 81       	ld	r24, Z
 51a:	88 2f       	mov	r24, r24
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	80 71       	andi	r24, 0x10	; 16
 520:	99 27       	eor	r25, r25
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	b1 f7       	brne	.-20     	; 0x512 <i2c_start_wait+0x84>
	        
    	    continue;
 526:	01 c0       	rjmp	.+2      	; 0x52a <i2c_start_wait+0x9c>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
 528:	01 c0       	rjmp	.+2      	; 0x52c <i2c_start_wait+0x9e>
     }
 52a:	b7 cf       	rjmp	.-146    	; 0x49a <i2c_start_wait+0xc>

}/* i2c_start_wait */
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <i2c_rep_start>:
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	1f 92       	push	r1
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
 542:	89 81       	ldd	r24, Y+1	; 0x01
 544:	0e 94 02 02 	call	0x404	; 0x404 <i2c_start>

}/* i2c_rep_start */
 548:	0f 90       	pop	r0
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <i2c_stop>:

/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 558:	8c eb       	ldi	r24, 0xBC	; 188
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	24 e9       	ldi	r18, 0x94	; 148
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 562:	00 00       	nop
 564:	8c eb       	ldi	r24, 0xBC	; 188
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	fc 01       	movw	r30, r24
 56a:	80 81       	ld	r24, Z
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	80 71       	andi	r24, 0x10	; 16
 572:	99 27       	eor	r25, r25
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	b1 f7       	brne	.-20     	; 0x564 <i2c_stop+0x14>

}/* i2c_stop */
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <i2c_write>:
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	00 d0       	rcall	.+0      	; 0x584 <i2c_write+0x6>
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 58a:	8b eb       	ldi	r24, 0xBB	; 187
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	2a 81       	ldd	r18, Y+2	; 0x02
 590:	fc 01       	movw	r30, r24
 592:	20 83       	st	Z, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
 594:	8c eb       	ldi	r24, 0xBC	; 188
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	24 e8       	ldi	r18, 0x84	; 132
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 59e:	00 00       	nop
 5a0:	8c eb       	ldi	r24, 0xBC	; 188
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	fc 01       	movw	r30, r24
 5a6:	80 81       	ld	r24, Z
 5a8:	88 23       	and	r24, r24
 5aa:	d4 f7       	brge	.-12     	; 0x5a0 <i2c_write+0x22>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 5ac:	89 eb       	ldi	r24, 0xB9	; 185
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	fc 01       	movw	r30, r24
 5b2:	80 81       	ld	r24, Z
 5b4:	88 7f       	andi	r24, 0xF8	; 248
 5b6:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
 5b8:	89 81       	ldd	r24, Y+1	; 0x01
 5ba:	88 32       	cpi	r24, 0x28	; 40
 5bc:	11 f0       	breq	.+4      	; 0x5c2 <i2c_write+0x44>
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <i2c_write+0x46>
	return 0;
 5c2:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_write */
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	08 95       	ret

000005ce <i2c_readAck>:
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	cd b7       	in	r28, 0x3d	; 61
 5d4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 5d6:	8c eb       	ldi	r24, 0xBC	; 188
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	24 ec       	ldi	r18, 0xC4	; 196
 5dc:	fc 01       	movw	r30, r24
 5de:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));    
 5e0:	00 00       	nop
 5e2:	8c eb       	ldi	r24, 0xBC	; 188
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	fc 01       	movw	r30, r24
 5e8:	80 81       	ld	r24, Z
 5ea:	88 23       	and	r24, r24
 5ec:	d4 f7       	brge	.-12     	; 0x5e2 <i2c_readAck+0x14>

    return TWDR;
 5ee:	8b eb       	ldi	r24, 0xBB	; 187
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	fc 01       	movw	r30, r24
 5f4:	80 81       	ld	r24, Z

}/* i2c_readAck */
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <i2c_readNak>:
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
 604:	8c eb       	ldi	r24, 0xBC	; 188
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	24 e8       	ldi	r18, 0x84	; 132
 60a:	fc 01       	movw	r30, r24
 60c:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT)));
 60e:	00 00       	nop
 610:	8c eb       	ldi	r24, 0xBC	; 188
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	fc 01       	movw	r30, r24
 616:	80 81       	ld	r24, Z
 618:	88 23       	and	r24, r24
 61a:	d4 f7       	brge	.-12     	; 0x610 <i2c_readNak+0x14>
	
    return TWDR;
 61c:	8b eb       	ldi	r24, 0xBB	; 187
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z

}/* i2c_readNak */
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <__cmpsf2>:
 62a:	2f d0       	rcall	.+94     	; 0x68a <__fp_cmp>
 62c:	08 f4       	brcc	.+2      	; 0x630 <__cmpsf2+0x6>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	08 95       	ret

00000632 <__fixunssfsi>:
 632:	57 d0       	rcall	.+174    	; 0x6e2 <__fp_splitA>
 634:	88 f0       	brcs	.+34     	; 0x658 <__fixunssfsi+0x26>
 636:	9f 57       	subi	r25, 0x7F	; 127
 638:	90 f0       	brcs	.+36     	; 0x65e <__fixunssfsi+0x2c>
 63a:	b9 2f       	mov	r27, r25
 63c:	99 27       	eor	r25, r25
 63e:	b7 51       	subi	r27, 0x17	; 23
 640:	a0 f0       	brcs	.+40     	; 0x66a <__fixunssfsi+0x38>
 642:	d1 f0       	breq	.+52     	; 0x678 <__fixunssfsi+0x46>
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	1a f0       	brmi	.+6      	; 0x654 <__fixunssfsi+0x22>
 64e:	ba 95       	dec	r27
 650:	c9 f7       	brne	.-14     	; 0x644 <__fixunssfsi+0x12>
 652:	12 c0       	rjmp	.+36     	; 0x678 <__fixunssfsi+0x46>
 654:	b1 30       	cpi	r27, 0x01	; 1
 656:	81 f0       	breq	.+32     	; 0x678 <__fixunssfsi+0x46>
 658:	5e d0       	rcall	.+188    	; 0x716 <__fp_zero>
 65a:	b1 e0       	ldi	r27, 0x01	; 1
 65c:	08 95       	ret
 65e:	5b c0       	rjmp	.+182    	; 0x716 <__fp_zero>
 660:	67 2f       	mov	r22, r23
 662:	78 2f       	mov	r23, r24
 664:	88 27       	eor	r24, r24
 666:	b8 5f       	subi	r27, 0xF8	; 248
 668:	39 f0       	breq	.+14     	; 0x678 <__fixunssfsi+0x46>
 66a:	b9 3f       	cpi	r27, 0xF9	; 249
 66c:	cc f3       	brlt	.-14     	; 0x660 <__fixunssfsi+0x2e>
 66e:	86 95       	lsr	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b3 95       	inc	r27
 676:	d9 f7       	brne	.-10     	; 0x66e <__fixunssfsi+0x3c>
 678:	3e f4       	brtc	.+14     	; 0x688 <__fixunssfsi+0x56>
 67a:	90 95       	com	r25
 67c:	80 95       	com	r24
 67e:	70 95       	com	r23
 680:	61 95       	neg	r22
 682:	7f 4f       	sbci	r23, 0xFF	; 255
 684:	8f 4f       	sbci	r24, 0xFF	; 255
 686:	9f 4f       	sbci	r25, 0xFF	; 255
 688:	08 95       	ret

0000068a <__fp_cmp>:
 68a:	99 0f       	add	r25, r25
 68c:	00 08       	sbc	r0, r0
 68e:	55 0f       	add	r21, r21
 690:	aa 0b       	sbc	r26, r26
 692:	e0 e8       	ldi	r30, 0x80	; 128
 694:	fe ef       	ldi	r31, 0xFE	; 254
 696:	16 16       	cp	r1, r22
 698:	17 06       	cpc	r1, r23
 69a:	e8 07       	cpc	r30, r24
 69c:	f9 07       	cpc	r31, r25
 69e:	c0 f0       	brcs	.+48     	; 0x6d0 <__fp_cmp+0x46>
 6a0:	12 16       	cp	r1, r18
 6a2:	13 06       	cpc	r1, r19
 6a4:	e4 07       	cpc	r30, r20
 6a6:	f5 07       	cpc	r31, r21
 6a8:	98 f0       	brcs	.+38     	; 0x6d0 <__fp_cmp+0x46>
 6aa:	62 1b       	sub	r22, r18
 6ac:	73 0b       	sbc	r23, r19
 6ae:	84 0b       	sbc	r24, r20
 6b0:	95 0b       	sbc	r25, r21
 6b2:	39 f4       	brne	.+14     	; 0x6c2 <__fp_cmp+0x38>
 6b4:	0a 26       	eor	r0, r26
 6b6:	61 f0       	breq	.+24     	; 0x6d0 <__fp_cmp+0x46>
 6b8:	23 2b       	or	r18, r19
 6ba:	24 2b       	or	r18, r20
 6bc:	25 2b       	or	r18, r21
 6be:	21 f4       	brne	.+8      	; 0x6c8 <__fp_cmp+0x3e>
 6c0:	08 95       	ret
 6c2:	0a 26       	eor	r0, r26
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <__fp_cmp+0x3e>
 6c6:	a1 40       	sbci	r26, 0x01	; 1
 6c8:	a6 95       	lsr	r26
 6ca:	8f ef       	ldi	r24, 0xFF	; 255
 6cc:	81 1d       	adc	r24, r1
 6ce:	81 1d       	adc	r24, r1
 6d0:	08 95       	ret

000006d2 <__fp_split3>:
 6d2:	57 fd       	sbrc	r21, 7
 6d4:	90 58       	subi	r25, 0x80	; 128
 6d6:	44 0f       	add	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	59 f0       	breq	.+22     	; 0x6f2 <__fp_splitA+0x10>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	71 f0       	breq	.+28     	; 0x6fc <__fp_splitA+0x1a>
 6e0:	47 95       	ror	r20

000006e2 <__fp_splitA>:
 6e2:	88 0f       	add	r24, r24
 6e4:	97 fb       	bst	r25, 7
 6e6:	99 1f       	adc	r25, r25
 6e8:	61 f0       	breq	.+24     	; 0x702 <__fp_splitA+0x20>
 6ea:	9f 3f       	cpi	r25, 0xFF	; 255
 6ec:	79 f0       	breq	.+30     	; 0x70c <__fp_splitA+0x2a>
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	14 06       	cpc	r1, r20
 6f8:	55 1f       	adc	r21, r21
 6fa:	f2 cf       	rjmp	.-28     	; 0x6e0 <__fp_split3+0xe>
 6fc:	46 95       	lsr	r20
 6fe:	f1 df       	rcall	.-30     	; 0x6e2 <__fp_splitA>
 700:	08 c0       	rjmp	.+16     	; 0x712 <__fp_splitA+0x30>
 702:	16 16       	cp	r1, r22
 704:	17 06       	cpc	r1, r23
 706:	18 06       	cpc	r1, r24
 708:	99 1f       	adc	r25, r25
 70a:	f1 cf       	rjmp	.-30     	; 0x6ee <__fp_splitA+0xc>
 70c:	86 95       	lsr	r24
 70e:	71 05       	cpc	r23, r1
 710:	61 05       	cpc	r22, r1
 712:	08 94       	sec
 714:	08 95       	ret

00000716 <__fp_zero>:
 716:	e8 94       	clt

00000718 <__fp_szero>:
 718:	bb 27       	eor	r27, r27
 71a:	66 27       	eor	r22, r22
 71c:	77 27       	eor	r23, r23
 71e:	cb 01       	movw	r24, r22
 720:	97 f9       	bld	r25, 7
 722:	08 95       	ret

00000724 <__gesf2>:
 724:	b2 df       	rcall	.-156    	; 0x68a <__fp_cmp>
 726:	08 f4       	brcc	.+2      	; 0x72a <__gesf2+0x6>
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__mulsf3>:
 72c:	0b d0       	rcall	.+22     	; 0x744 <__mulsf3x>
 72e:	78 c0       	rjmp	.+240    	; 0x820 <__fp_round>
 730:	69 d0       	rcall	.+210    	; 0x804 <__fp_pscA>
 732:	28 f0       	brcs	.+10     	; 0x73e <__mulsf3+0x12>
 734:	6e d0       	rcall	.+220    	; 0x812 <__fp_pscB>
 736:	18 f0       	brcs	.+6      	; 0x73e <__mulsf3+0x12>
 738:	95 23       	and	r25, r21
 73a:	09 f0       	breq	.+2      	; 0x73e <__mulsf3+0x12>
 73c:	5a c0       	rjmp	.+180    	; 0x7f2 <__fp_inf>
 73e:	5f c0       	rjmp	.+190    	; 0x7fe <__fp_nan>
 740:	11 24       	eor	r1, r1
 742:	ea cf       	rjmp	.-44     	; 0x718 <__fp_szero>

00000744 <__mulsf3x>:
 744:	c6 df       	rcall	.-116    	; 0x6d2 <__fp_split3>
 746:	a0 f3       	brcs	.-24     	; 0x730 <__mulsf3+0x4>

00000748 <__mulsf3_pse>:
 748:	95 9f       	mul	r25, r21
 74a:	d1 f3       	breq	.-12     	; 0x740 <__mulsf3+0x14>
 74c:	95 0f       	add	r25, r21
 74e:	50 e0       	ldi	r21, 0x00	; 0
 750:	55 1f       	adc	r21, r21
 752:	62 9f       	mul	r22, r18
 754:	f0 01       	movw	r30, r0
 756:	72 9f       	mul	r23, r18
 758:	bb 27       	eor	r27, r27
 75a:	f0 0d       	add	r31, r0
 75c:	b1 1d       	adc	r27, r1
 75e:	63 9f       	mul	r22, r19
 760:	aa 27       	eor	r26, r26
 762:	f0 0d       	add	r31, r0
 764:	b1 1d       	adc	r27, r1
 766:	aa 1f       	adc	r26, r26
 768:	64 9f       	mul	r22, r20
 76a:	66 27       	eor	r22, r22
 76c:	b0 0d       	add	r27, r0
 76e:	a1 1d       	adc	r26, r1
 770:	66 1f       	adc	r22, r22
 772:	82 9f       	mul	r24, r18
 774:	22 27       	eor	r18, r18
 776:	b0 0d       	add	r27, r0
 778:	a1 1d       	adc	r26, r1
 77a:	62 1f       	adc	r22, r18
 77c:	73 9f       	mul	r23, r19
 77e:	b0 0d       	add	r27, r0
 780:	a1 1d       	adc	r26, r1
 782:	62 1f       	adc	r22, r18
 784:	83 9f       	mul	r24, r19
 786:	a0 0d       	add	r26, r0
 788:	61 1d       	adc	r22, r1
 78a:	22 1f       	adc	r18, r18
 78c:	74 9f       	mul	r23, r20
 78e:	33 27       	eor	r19, r19
 790:	a0 0d       	add	r26, r0
 792:	61 1d       	adc	r22, r1
 794:	23 1f       	adc	r18, r19
 796:	84 9f       	mul	r24, r20
 798:	60 0d       	add	r22, r0
 79a:	21 1d       	adc	r18, r1
 79c:	82 2f       	mov	r24, r18
 79e:	76 2f       	mov	r23, r22
 7a0:	6a 2f       	mov	r22, r26
 7a2:	11 24       	eor	r1, r1
 7a4:	9f 57       	subi	r25, 0x7F	; 127
 7a6:	50 40       	sbci	r21, 0x00	; 0
 7a8:	8a f0       	brmi	.+34     	; 0x7cc <__mulsf3_pse+0x84>
 7aa:	e1 f0       	breq	.+56     	; 0x7e4 <__mulsf3_pse+0x9c>
 7ac:	88 23       	and	r24, r24
 7ae:	4a f0       	brmi	.+18     	; 0x7c2 <__mulsf3_pse+0x7a>
 7b0:	ee 0f       	add	r30, r30
 7b2:	ff 1f       	adc	r31, r31
 7b4:	bb 1f       	adc	r27, r27
 7b6:	66 1f       	adc	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	91 50       	subi	r25, 0x01	; 1
 7be:	50 40       	sbci	r21, 0x00	; 0
 7c0:	a9 f7       	brne	.-22     	; 0x7ac <__mulsf3_pse+0x64>
 7c2:	9e 3f       	cpi	r25, 0xFE	; 254
 7c4:	51 05       	cpc	r21, r1
 7c6:	70 f0       	brcs	.+28     	; 0x7e4 <__mulsf3_pse+0x9c>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <__fp_inf>
 7ca:	a6 cf       	rjmp	.-180    	; 0x718 <__fp_szero>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	ec f3       	brlt	.-6      	; 0x7ca <__mulsf3_pse+0x82>
 7d0:	98 3e       	cpi	r25, 0xE8	; 232
 7d2:	dc f3       	brlt	.-10     	; 0x7ca <__mulsf3_pse+0x82>
 7d4:	86 95       	lsr	r24
 7d6:	77 95       	ror	r23
 7d8:	67 95       	ror	r22
 7da:	b7 95       	ror	r27
 7dc:	f7 95       	ror	r31
 7de:	e7 95       	ror	r30
 7e0:	9f 5f       	subi	r25, 0xFF	; 255
 7e2:	c1 f7       	brne	.-16     	; 0x7d4 <__mulsf3_pse+0x8c>
 7e4:	fe 2b       	or	r31, r30
 7e6:	88 0f       	add	r24, r24
 7e8:	91 1d       	adc	r25, r1
 7ea:	96 95       	lsr	r25
 7ec:	87 95       	ror	r24
 7ee:	97 f9       	bld	r25, 7
 7f0:	08 95       	ret

000007f2 <__fp_inf>:
 7f2:	97 f9       	bld	r25, 7
 7f4:	9f 67       	ori	r25, 0x7F	; 127
 7f6:	80 e8       	ldi	r24, 0x80	; 128
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	08 95       	ret

000007fe <__fp_nan>:
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	80 ec       	ldi	r24, 0xC0	; 192
 802:	08 95       	ret

00000804 <__fp_pscA>:
 804:	00 24       	eor	r0, r0
 806:	0a 94       	dec	r0
 808:	16 16       	cp	r1, r22
 80a:	17 06       	cpc	r1, r23
 80c:	18 06       	cpc	r1, r24
 80e:	09 06       	cpc	r0, r25
 810:	08 95       	ret

00000812 <__fp_pscB>:
 812:	00 24       	eor	r0, r0
 814:	0a 94       	dec	r0
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	14 06       	cpc	r1, r20
 81c:	05 06       	cpc	r0, r21
 81e:	08 95       	ret

00000820 <__fp_round>:
 820:	09 2e       	mov	r0, r25
 822:	03 94       	inc	r0
 824:	00 0c       	add	r0, r0
 826:	11 f4       	brne	.+4      	; 0x82c <__fp_round+0xc>
 828:	88 23       	and	r24, r24
 82a:	52 f0       	brmi	.+20     	; 0x840 <__fp_round+0x20>
 82c:	bb 0f       	add	r27, r27
 82e:	40 f4       	brcc	.+16     	; 0x840 <__fp_round+0x20>
 830:	bf 2b       	or	r27, r31
 832:	11 f4       	brne	.+4      	; 0x838 <__fp_round+0x18>
 834:	60 ff       	sbrs	r22, 0
 836:	04 c0       	rjmp	.+8      	; 0x840 <__fp_round+0x20>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	08 95       	ret

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
